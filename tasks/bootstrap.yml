---

- name: "Bootstrap: ensure SSH key exist"
  local_action:
    module: cs_sshkeypair 
    name: demo 
    public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"

- name: "Bootstrap: security group setup"
  local_action:
    module: cs_securitygroup
    name: '{{ item }}'
  with_items:
    - Demo

- name: "Bootstrap: add inbound rules to security group Demo"
  local_action:
    module: cs_securitygroup_rule
    security_group: Demo
    start_port: '{{ item }}'
    end_port: '{{ item }}'
  with_items:
  - 22

- name: "Bootstrap: allow PGSQL traffic between instances"
  local_action:
    module: cs_securitygroup_rule
    security_group: Demo
    user_security_group: Demo
    start_port: 5432
    end_port: 5432
    protocol: '{{ item }}'
  with_items:
  - tcp

- name: "Bootstrap: ensure affinity groug exists"
  local_action:
    module: cs_affinitygroup
    name: pgsql
    affinty_type: host anti-affinity

- name: "Bootstrap: deploy PGDB Master"
  local_action:
    module: cs_instance
    name: PGSQL-MASTER
    display_name: PGSQL-MASTER
    template: '{{ cs_template }}' 
    service_offering: '{{ cs_size }}'
    zone: 'CH-DK-2' # or CH-GVA-2
    security_groups:
    - Demo
    affinity_groups: pgsql
    ssh_key: demo
  register: pgmaster

- name: "Bootstrap: deploy PGDB Slave"
  local_action:
    module: cs_instance
    name: PGSQL-SLAVE1
    display_name: PGSQL-SLAVE1
    template: '{{ cs_template }}'
    service_offering: '{{ cs_size }}'
    zone: 'CH-DK-2' # or CH-GVA-2
    security_groups:
    - Demo
    affinity_groups: pgsql
    ssh_key: demo
  register: pgslave

- name: "Bootstrap: assing IP to the inventory"
  add_host: hostname={{ pgmaster.default_ip }} groups=pgsql,pgmaster

- name: "Bootstrap: assing IP to the inventory"
  add_host: hostname={{ pgslave.default_ip }} groups=pgsql,pgslaves

- name: "Bootstrap: waiting for SSH to come up"
  wait_for: port=22 host={{ pgmaster.default_ip }}

- name: "Bootstrap: waiting for SSH to come up"
  wait_for: port=22 host={{ pgslave.default_ip }}
